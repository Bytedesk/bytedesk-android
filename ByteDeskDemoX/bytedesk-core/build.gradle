apply plugin: 'com.android.library'
// 步骤3：添加下面这一行
apply plugin: 'com.google.protobuf'

android {
//    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {

        compileSdk rootProject.ext.compileSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }

//        ndk {
//            // TODO: 根据平台需要注释掉无关.so以减小apk体积
//            moduleName = "mmnet"
//            abiFilter "arm64-v8a"
////            abiFilter "armeabi"
//            abiFilter "armeabi-v7a"
//            abiFilter "x86"
//            abiFilter "x86_64"
//        }

    }

    // 步骤4：添加sourceSets
//    sourceSets {
//        main {
//            proto {
//                srcDir "src/main/proto"
//            }
//            java {
//                srcDir "src/main/java"
//            }
//            jni {
//                srcDir "src/main/jni"
//            }
//            jniLibs {
//                srcDir "libs"
//            }
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        abortOnError false
    }
    namespace 'com.bytedesk.core'

//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//            version "3.10.2"
//        }
//    }

}

// 步骤5：添加如下protobuf{...}
protobuf {
    protoc {
        // 建议修改为最新版本
//        https://mvnrepository.com/artifact/com.google.protobuf/protoc
        artifact = 'com.google.protobuf:protoc:3.18.1'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // MQTT
//    https://www.eclipse.org/paho/clients/java/
//    https://github.com/eclipse/paho.mqtt.java
//    https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3:" + rootProject.mqttClientVersion
//    implementation project(':libmqtt')
//    implementation project(':libmars')
//    implementation project(':libpush')

    // 步骤6：添加下面一行，建议修改为最新版本
//    implementation 'com.google.protobuf:protobuf-java:3.9.1'
    // 步骤6：添加下面一行，建议修改为最新版本
//    implementation 'com.google.protobuf:protobuf-java:' + rootProject.protobufJavaVersion

//    https://mvnrepository.com/artifact/com.google.protobuf/protobuf-javalite
    implementation 'com.google.protobuf:protobuf-javalite:' + rootProject.protobufJavaVersion
//    https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:' + rootProject.gsonVersion

    // Signal Protocol Android
    // https://mvnrepository.com/artifact/org.whispersystems/signal-protocol-android
//    https://github.com/signalapp/libsignal-protocol-java
//    implementation 'org.whispersystems:signal-protocol-android:2.8.1'
//    implementation 'org.whispersystems:signal-service-android:2.15.1'
//    implementation 'org.whispersystems:webrtc-android:M77'
//    implementation 'org.whispersystems:webrtc-android-debug:M77'
//    implementation 'org.whispersystems:curve25519-android:0.5.0'

    // RxJava + Retrofit2 + OkHttp3
//    https://mvnrepository.com/artifact/com.squareup.retrofit2/retrofit
    implementation 'com.squareup.retrofit2:retrofit:' + rootProject.retrofit2Version
    implementation "com.squareup.retrofit2:converter-gson:" + rootProject.retrofit2Version
//    含有protobuf-java与libmars中的protobuf-javalite冲突，应该exclude
//    implementation 'com.squareup.retrofit2:converter-protobuf:' + rootProject.retrofit2Version
    implementation "com.squareup.retrofit2:adapter-rxjava2:" + rootProject.retrofit2Version

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/logging-interceptor
    implementation 'com.squareup.okhttp3:logging-interceptor:' + rootProject.okhttp3Version

    // fix: java.lang.ClassNotFoundException: Didn't find class "org.conscrypt.ConscryptHostnameVerifier"
//    https://mvnrepository.com/artifact/org.conscrypt/conscrypt-android
//    implementation 'org.conscrypt:conscrypt-android:' + rootProject.conscryptVersion

    // RxAndroid: Reactive Extensions for Android
    // https://github.com/ReactiveX/RxAndroid
//    https://mvnrepository.com/artifact/io.reactivex.rxjava2/rxandroid
    implementation 'io.reactivex.rxjava2:rxandroid:' + rootProject.rxandroidVersion

//    WCDB是一个高效、完整、易用的移动数据库框架，基于SQLCipher，支持iOS, macOS和Android。
//    https://github.com/Tencent/wcdb/wiki/Android%E6%8E%A5%E5%85%A5%E4%B8%8E%E8%BF%81%E7%A7%BB
//    https://mvnrepository.com/artifact/com.tencent.wcdb/wcdb-android
//    implementation 'com.tencent.wcdb:wcdb-android:' + rootProject.wcdbVersion
//    https://mvnrepository.com/artifact/com.tencent.wcdb/room
//    implementation 'com.tencent.wcdb:room:' + rootProject.wcdbVersion

    // 替代share_preference
//    https://github.com/Tencent/MMKV
//    implementation 'com.tencent:mmkv:1.0.23'
//    https://mvnrepository.com/artifact/com.tencent/mmkv-static
//    implementation 'com.tencent:mmkv-static:' + rootProject.mmkvVersion

    // 事件总线
//    https://mvnrepository.com/artifact/org.greenrobot/eventbus
    implementation 'org.greenrobot:eventbus:' + rootProject.eventbusVersion

    // https://github.com/orhanobut/logger
    implementation 'com.orhanobut:logger:' + rootProject.loggerVersion

    // https://github.com/promeG/TinyPinyin
//    https://mvnrepository.com/artifact/com.github.promeg/tinypinyin
    // 汉字转拼音
    implementation 'com.github.promeg:tinypinyin:' + rootProject.tinypinyinVersion // TinyPinyin核心包，约80KB
    implementation 'com.github.promeg:tinypinyin-lexicons-android-cncity:' + rootProject.tinypinyinVersion // 可选，适用于Android的中国地区词典

//    https://developer.android.com/topic/libraries/architecture/adding-components.html
//    https://mvnrepository.com/artifact/androidx.lifecycle/lifecycle-extensions
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:" + rootProject.archLifecycleVersion
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:" + rootProject.archLifecycleVersion
    // optional - Test helpers for LiveData
//    testImplementation "androidx.arch.core:core-testing:" + rootProject.archLifecycleVersion

//    https://mvnrepository.com/artifact/androidx.room/room-runtime
    implementation "androidx.room:room-runtime:" + rootProject.archRoomVersion
//    https://mvnrepository.com/artifact/androidx.room/room-compiler
    annotationProcessor "androidx.room:room-compiler:" + rootProject.archRoomVersion
    // https://mvnrepository.com/artifact/androidx.room/room-common
    implementation "androidx.room:room-common:" + rootProject.archRoomVersion

    // optional - RxJava support for Room
//    implementation "androidx.room:room-rxjava2:" + rootProject.archRoomVersion
    // optional - Guava support for Room, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:" + rootProject.archRoomVersion
    // Test helpers
//    testImplementation "androidx.room:room-testing:" + rootProject.archRoomVersion

    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
// aar 文件直接到 build/outputs/aar 文件夹中拷贝

version = rootProject.ext.bytedeskCoreVersion
//group = "com.bytedesk"
// apply from: "bintray.gradle"

ext {
    PUBLISH_ARTIFACT_ID = 'libcore'
}
apply from: '../publish.gradle'
